import pandas
import seaborn

data = pandas.read_csv('app_stats.csv')
print(data['week_number'])
print(data['installs'])
"""
Постройте столбчатую диаграмму, отражающую количество установок приложения по неделям. 
Ранее вы строили столбчатые диаграммы только по спискам, но со столбцами датасета barplot() тоже работает — 
на графике в таком случае даже появятся подписи к осям. Номера недель лежат в столбце week_number, 
а количество установок — в столбце installs.
"""
seaborn.barplot(x=data['week_number'], y=data['installs'])
"""
Проверьте, связаны ли пики на графике с рекламными кампаниями.
Постройте столбчатую диаграмму, на которой по горизонтальной оси будут отмечены номера недель (столбец week_number), 
а по вертикальной — данные о проведении рекламных кампаний (столбец ad_campaign).
"""
seaborn.barplot(x=data['week_number'], y=data['ad_campaign'])
"""
3.
Интересно, как обстоит дело с платежами. 
Постройте столбчатую диаграмму, отражающую количество покупок приложения (payments) по неделям (week_number).
"""
seaborn.barplot(x=data['week_number'], y=data['payments'])
"""
4.
Хорошо бы построить такой график и для конверсии. 
Тогда можно будет понять, менялась ли она во времени: 
если менялась, то ориентироваться на среднегодовую конверсию при оценке окупаемости рекламных кампаний будет всё-таки некорректно.
Но сначала конверсию ещё нужно рассчитать. 

Напишите цикл, который разделит каждое значение из столбца с количеством платежей ('payments') 
на соответствующее значение из столбца с числом установок ('installs'). 
Результаты вычислений сохраните в новом списке conversions — тогда функция print() выведет их на экран.
Нужные столбцы мы преобразовали в списки функцией list().
"""

payments = list(data['payments'])  # список с количеством платежей
installs = list(data['installs'])  # список с количеством установок

conversions = []

for index in range(len(payments)):
    conversions.append(payments[index] / installs[index])

print(conversions)  # выводим список conversions на экран

"""
5.
Постройте столбчатую диаграмму, отражающую значения конверсии из списка conversions по неделям (столбец 'week_number').
"""
seaborn.barplot(x=data['week_number'], y=conversions)

"""
ВЫВОД
Одна рекламная установка обходится «Книжному грызуну» в 60 рублей. 
Поэтому, чтобы окупиться, она должна приносить больше этой суммы. На 
графике видно, что лишь четыре из десяти рекламных кампаний преодолели 
этот барьер.

One advertising installation costs the "Book Rodent" 60 rubles. 
Therefore, in order to break even, it must bring in more than this amount. At 
The graph shows that only four out of ten advertising campaigns crossed 
this barrier.


Выводы
Оказывается, общая среднегодовая конверсия непоказательна. 
Без выделения «рекламных» пользователей выходило, что все рекламные кампании «Книжного грызуна» окупаются, 
хотя на самом деле окупились меньше половины.
image
На практике при анализе рекламных кампаний учитывают множество других параметров, 
в том числе сегмент аудитории, на которую направлена реклама, площадку, 
а также заголовок и текст рекламного объявления.
А что стало с «Книжным грызуном»?
Директор по маркетингу сделал выводы. Проанализировав причины успеха окупившихся рекламных кампаний, 
маркетологи стали выпускать больше похожей рекламы. Благодаря этому продажи приложения выросли в несколько раз, 
и «Книжному грызуну» хватило денег на всё: и на тёмную версию, и на озвучку книг искусственным интеллектом.
"""
apples = 'яблоки'
bananas = 'бананы'
print(apples > bananas) 